name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  test-and-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      # 1️⃣ Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Setup Homebrew
      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@main

      # 3️⃣ Instalar dependencias necesarias
      - name: Install dependencies
        run: |
          brew install gcc make shfmt

      # 4️⃣ Formatear automáticamente scripts Bash
      - name: Fix Bash style
        run: |
          find . -type f -name "*.sh" -exec shfmt -w {} +

      # 5️⃣ Test de la fórmula
      - name: Test formula
        run: |
          # Remover tap si existe
          brew untap cpcready/toolchain 2>/dev/null || true
          # Crear directorio para el tap
          mkdir -p "$(brew --repository)/Library/Taps/cpcready"
          # Crear link simbólico al repositorio actual
          ln -s "$PWD" "$(brew --repository)/Library/Taps/cpcready/homebrew-toolchain"
          # Instalar y probar
          brew install --build-from-source --verbose toolchain
          brew test toolchain

      # 6️⃣ Auto-aprobar la PR si pasan los tests
      - name: Auto-approve PR
        if: github.event_name == 'pull_request' && success()
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # 7️⃣ Auto-merge si está aprobada
      - name: Auto-merge PR
        if: github.event_name == 'pull_request' && success()
        run: |
          gh pr merge --auto --merge "${{ github.event.pull_request.html_url }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: test-and-merge
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from formula
        id: get_version
        run: |
          VERSION=$(grep -m1 'url ".*v[0-9]*\.[0-9]*\.[0-9]*\.tar\.gz"' Formula/toolchain.rb | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.get_version.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          gh release create $VERSION \
            --title "Release $VERSION" \
            --notes "Release $VERSION of the CPC Development Toolchain" \
            --draft=false \
            --latest
